// <auto-generated />
using System;
using DDD_Practice.DDDPractice.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DDDPractice.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250829224304_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DDD_Practice.DDDPractice.Domain.Entities.OrderReservationItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("SellerId");

                    b.ToTable("OrderReservationItem");
                });

            modelBuilder.Entity("DDD_Practice.DDDPractice.Domain.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("DDD_Practice.DDDPractice.Domain.Entities.SellerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Seller");
                });

            modelBuilder.Entity("DDD_Practice.DDDPractice.Domain.Entities.StockEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("DDD_Practice.DDDPractice.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DDD_Practice.DDDPractice.Domain.OrderReservationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("PickupDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("PickupDeadline")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("ReservationFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("ValueTotal")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OrderReservation");
                });

            modelBuilder.Entity("DDD_Practice.DDDPractice.Domain.Entities.OrderReservationItemEntity", b =>
                {
                    b.HasOne("DDD_Practice.DDDPractice.Domain.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDD_Practice.DDDPractice.Domain.OrderReservationEntity", "Reservation")
                        .WithMany("ListOrderItems")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDD_Practice.DDDPractice.Domain.Entities.SellerEntity", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Reservation");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("DDD_Practice.DDDPractice.Domain.Entities.ProductEntity", b =>
                {
                    b.HasOne("DDD_Practice.DDDPractice.Domain.Entities.SellerEntity", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("DDD_Practice.DDDPractice.Domain.Entities.SellerEntity", b =>
                {
                    b.OwnsOne("DDD_Practice.DDDPractice.Domain.ValueObjects.PickupLocation", "PickupLocation", b1 =>
                        {
                            b1.Property<Guid>("SellerEntityId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("SellerEntityId");

                            b1.ToTable("Seller");

                            b1.WithOwner()
                                .HasForeignKey("SellerEntityId");
                        });

                    b.Navigation("PickupLocation")
                        .IsRequired();
                });

            modelBuilder.Entity("DDD_Practice.DDDPractice.Domain.Entities.StockEntity", b =>
                {
                    b.HasOne("DDD_Practice.DDDPractice.Domain.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DDD_Practice.DDDPractice.Domain.Entities.UserEntity", b =>
                {
                    b.OwnsOne("DDD_Practice.DDDPractice.Domain.ValueObjects.SecurityCode", "SecurityCode", b1 =>
                        {
                            b1.Property<Guid>("UserEntityId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("SecurityCode");

                            b1.HasKey("UserEntityId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityId");
                        });

                    b.Navigation("SecurityCode")
                        .IsRequired();
                });

            modelBuilder.Entity("DDD_Practice.DDDPractice.Domain.OrderReservationEntity", b =>
                {
                    b.HasOne("DDD_Practice.DDDPractice.Domain.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DDD_Practice.DDDPractice.Domain.ValueObjects.PickupLocation", "PickupLocation", b1 =>
                        {
                            b1.Property<Guid>("OrderReservationEntityId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("OrderReservationEntityId");

                            b1.ToTable("OrderReservation");

                            b1.WithOwner()
                                .HasForeignKey("OrderReservationEntityId");
                        });

                    b.Navigation("PickupLocation")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DDD_Practice.DDDPractice.Domain.OrderReservationEntity", b =>
                {
                    b.Navigation("ListOrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
